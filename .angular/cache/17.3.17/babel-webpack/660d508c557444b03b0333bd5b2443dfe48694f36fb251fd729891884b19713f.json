{"ast":null,"code":"import { BehaviorSubject, interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let SpeedService = /*#__PURE__*/(() => {\n  class SpeedService {\n    constructor() {\n      this.speedBuffer = new BehaviorSubject([]);\n      this.BUFFER_SIZE = 10; // Keep last 10 measurements (1 second at 100ms intervals)\n      // Calculate mean speed every second\n      this.meanSpeed$ = interval(1000).pipe(map(() => {\n        const speeds = this.speedBuffer.value;\n        if (speeds.length === 0) return 0;\n        return speeds.reduce((sum, speed) => sum + speed, 0) / speeds.length;\n      }));\n    }\n    // Add a new speed measurement\n    addSpeedMeasurement(speed) {\n      const currentBuffer = this.speedBuffer.value;\n      const newBuffer = [...currentBuffer, speed].slice(-this.BUFFER_SIZE);\n      this.speedBuffer.next(newBuffer);\n    }\n    // Get the current mean speed\n    getCurrentMeanSpeed() {\n      const speeds = this.speedBuffer.value;\n      if (speeds.length === 0) return 0;\n      return speeds.reduce((sum, speed) => sum + speed, 0) / speeds.length;\n    }\n    static {\n      this.ɵfac = function SpeedService_Factory(t) {\n        return new (t || SpeedService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: SpeedService,\n        factory: SpeedService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return SpeedService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}