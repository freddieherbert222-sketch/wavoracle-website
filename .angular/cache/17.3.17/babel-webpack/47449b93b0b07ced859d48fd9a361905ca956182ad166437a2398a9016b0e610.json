{"ast":null,"code":"import { of, Subject } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./wavoracle-socket\";\nexport let DownloadsService = /*#__PURE__*/(() => {\n  class DownloadsService {\n    constructor(http, socket) {\n      this.http = http;\n      this.socket = socket;\n      this.loading = true;\n      this.queue = new Map();\n      this.done = new Map();\n      this.queueChanged = new Subject();\n      this.doneChanged = new Subject();\n      this.customDirsChanged = new Subject();\n      this.ytdlOptionsChanged = new Subject();\n      this.configurationChanged = new Subject();\n      this.updated = new Subject();\n      this.configuration = {};\n      this.customDirs = {};\n      socket.fromEvent('all').subscribe(strdata => {\n        this.loading = false;\n        let data = JSON.parse(strdata);\n        this.queue.clear();\n        data[0].forEach(entry => this.queue.set(...entry));\n        this.done.clear();\n        data[1].forEach(entry => this.done.set(...entry));\n        this.queueChanged.next(null);\n        this.doneChanged.next(null);\n      });\n      socket.fromEvent('added').subscribe(strdata => {\n        let data = JSON.parse(strdata);\n        this.queue.set(data.url, data);\n        this.queueChanged.next(null);\n      });\n      socket.fromEvent('updated').subscribe(strdata => {\n        let data = JSON.parse(strdata);\n        let dl = this.queue.get(data.url);\n        data.checked = dl.checked;\n        data.deleting = dl.deleting;\n        this.queue.set(data.url, data);\n        this.updated.next(null);\n      });\n      socket.fromEvent('completed').subscribe(strdata => {\n        let data = JSON.parse(strdata);\n        this.queue.delete(data.url);\n        this.done.set(data.url, data);\n        this.queueChanged.next(null);\n        this.doneChanged.next(null);\n      });\n      socket.fromEvent('canceled').subscribe(strdata => {\n        let data = JSON.parse(strdata);\n        this.queue.delete(data);\n        this.queueChanged.next(null);\n      });\n      socket.fromEvent('cleared').subscribe(strdata => {\n        let data = JSON.parse(strdata);\n        this.done.delete(data);\n        this.doneChanged.next(null);\n      });\n      socket.fromEvent('configuration').subscribe(strdata => {\n        let data = JSON.parse(strdata);\n        console.debug(\"got configuration:\", data);\n        this.configuration = data;\n        this.configurationChanged.next(data);\n      });\n      socket.fromEvent('custom_dirs').subscribe(strdata => {\n        let data = JSON.parse(strdata);\n        console.debug(\"got custom_dirs:\", data);\n        this.customDirs = data;\n        this.customDirsChanged.next(data);\n      });\n      socket.fromEvent('ytdl_options_changed').subscribe(strdata => {\n        let data = JSON.parse(strdata);\n        this.ytdlOptionsChanged.next(data);\n      });\n    }\n    handleHTTPError(error) {\n      var msg = error.error instanceof ErrorEvent ? error.error.message : error.error;\n      return of({\n        status: 'error',\n        msg: msg\n      });\n    }\n    add(url, quality, format, folder, customNamePrefix, playlistStrictMode, playlistItemLimit, autoStart) {\n      return this.http.post('add', {\n        url: url,\n        quality: quality,\n        format: format,\n        folder: folder,\n        custom_name_prefix: customNamePrefix,\n        playlist_strict_mode: playlistStrictMode,\n        playlist_item_limit: playlistItemLimit,\n        auto_start: autoStart\n      }).pipe(catchError(this.handleHTTPError));\n    }\n    startById(ids) {\n      return this.http.post('start', {\n        ids: ids\n      });\n    }\n    delById(where, ids) {\n      ids.forEach(id => this[where].get(id).deleting = true);\n      return this.http.post('delete', {\n        where: where,\n        ids: ids\n      });\n    }\n    startByFilter(where, filter) {\n      let ids = [];\n      this[where].forEach(dl => {\n        if (filter(dl)) ids.push(dl.url);\n      });\n      return this.startById(ids);\n    }\n    delByFilter(where, filter) {\n      let ids = [];\n      this[where].forEach(dl => {\n        if (filter(dl)) ids.push(dl.url);\n      });\n      return this.delById(where, ids);\n    }\n    addDownloadByUrl(url) {\n      const defaultQuality = 'best';\n      const defaultFormat = 'mp4';\n      const defaultFolder = '';\n      const defaultCustomNamePrefix = '';\n      const defaultPlaylistStrictMode = false;\n      const defaultPlaylistItemLimit = 0;\n      const defaultAutoStart = true;\n      return new Promise((resolve, reject) => {\n        this.add(url, defaultQuality, defaultFormat, defaultFolder, defaultCustomNamePrefix, defaultPlaylistStrictMode, defaultPlaylistItemLimit, defaultAutoStart).subscribe(response => resolve(response), error => reject(error));\n      });\n    }\n    exportQueueUrls() {\n      return Array.from(this.queue.values()).map(download => download.url);\n    }\n    static {\n      this.ɵfac = function DownloadsService_Factory(t) {\n        return new (t || DownloadsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.WavOracleSocket));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DownloadsService,\n        factory: DownloadsService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DownloadsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}